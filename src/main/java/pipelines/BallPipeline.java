package pipelines;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import edu.wpi.first.vision.VisionPipeline;

/**
 * Hub Target Pipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class BallPipeline implements VisionPipeline {

    public int val;
  public Rect boundingRectBlue;
  public Rect boundingRectRed;

  public Rect findBoundingRectCommon(Scalar colorLow, Scalar colorHigh, Mat frame)
  {
    Mat frameHSV = new Mat();
    Mat mask = new Mat();
    Mat hierarchy = new Mat();
    List<MatOfPoint> contours = new ArrayList<>();  
    Imgproc.cvtColor(frame, frameHSV, Imgproc.COLOR_BGR2HSV);

    Core.inRange(frameHSV, colorLow, colorHigh, mask);

    Imgproc.findContours(mask, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);
    Rect boundingRect = null;
    if (contours.size() > 0)
    {
        System.out.println("found contours");
        double contourArea;
        double maxContourArea = 0;
        int maxContourIdx = 0;
        for (int contourIdx = 0; contourIdx < contours.size(); contourIdx++ )
        {
            contourArea = Imgproc.contourArea(contours.get(contourIdx));
            if(contourArea > maxContourArea)
            {
                maxContourArea = contourArea;
                maxContourIdx = contourIdx;
            }
        }

        Scalar rectColor = new Scalar(0,255,0);

        boundingRect = Imgproc.boundingRect(contours.get(maxContourIdx));
        //Imgproc.rectangle(frame,rect.tl(),rect.br(),rectColor,2);
        //HighGui.imshow("colorTest", frame);
        System.out.println("Area of Bounding rect = " + boundingRect.area());
        System.out.println("Top left of rect: " + boundingRect.toString());
    }
    return boundingRect;
  }

  public void findBoundingRectBlue(Mat frame)
  {
    int lowHueBlue = 99;
    int lowSatBlue = 106;
    int lowValBlue = 0;
    int highHueBlue = 105;
    int highSatBlue = 255;
    int highValBlue = 255;

    Scalar colorLow = new Scalar(lowHueBlue,lowSatBlue,lowValBlue);
    Scalar colorHigh = new Scalar(highHueBlue,highSatBlue,highValBlue);

    boundingRectBlue = findBoundingRectCommon(colorLow,colorHigh,frame);  
  }

  public void findBoundingRectRed(Mat frame)
  {
    int lowHueRed = 0;
    int lowSatRed = 136;
    int lowValRed = 8;
    int highHueRed = 6;
    int highSatRed = 255;
    int highValRed = 255;

    Scalar colorLow = new Scalar(lowHueRed,lowSatRed,lowValRed);
    Scalar colorHigh = new Scalar(highHueRed,highSatRed,highValRed);

    boundingRectRed = findBoundingRectCommon(colorLow,colorHigh,frame);
  }

  public void findBoundingRect(Mat frame)
  {
    System.out.println("blue bounding rect " + boundingRectBlue);
    System.out.println("red bounding rect " + boundingRectRed);
    findBoundingRectBlue(frame);
    findBoundingRectRed(frame);
  }

  @Override
  public void process(Mat mat) {
    findBoundingRect(mat);
  }

}