plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2022.2.1"
    // id 'com.github.johnrengelman.shadow' version '4.0.3' apply false
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = ""

// apply plugin: 'com.github.johnrengelman.shadow'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

repositories {
    jcenter()
    mavenCentral()
    flatDir {
        dirs '/usr/local/frc/java', '.', './lib'
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    // implementation wpi.java.deps.wpilib()
    // implementation wpi.java.vendor.java()

    // roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    // roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    // roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    // roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    // nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    // nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    // simulationDebug wpi.sim.enableDebug()

    // nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    // nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    // simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    implementation 'com.google.code.gson:gson:2.8.5'

    // Logging dependencies
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'

        // processing
    implementation('org.processing:core:3.3.7')

    // java cpp
    implementation('org.bytedeco:javacpp:1.5.6')

    // librealsense2
    implementation('org.bytedeco:librealsense2:2.44.0-1.5.6')
    implementation('org.bytedeco:librealsense2-platform:2.44.0-1.5.6')

    implementation name: 'opencv-347'
    implementation name: 'cameraserver'
    implementation name: 'wpilibj'
    implementation name: 'wpiutil'
    implementation name: 'ntcore'
    implementation name: 'cscore'
    implementation name: 'wpiHal'

}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)


// task fatJar(type: Jar) {
//     baseName = project.name + '-all'
//     from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//     with jar
// }
